name: mock srpm build
author: jw3
description: Action for simple chroot building of source RPMs
branding:
  icon: package
  color: red

inputs:
  chroot:
    description: Mock chroot id -- see https://github.com/rpm-software-management/mock/tree/main/mock-core-configs/etc/mock
    required: true
  spec:
    description: Path to spec file
    required: true
  src:
    description: Path (file or dir) mapped to the rpmbuild/SOURCES directory
    required: false
  cache:
    description: Enable chroot environment caching
    required: true
    default: 'true'
  result-dir:
    description: Target path for writing build artifacts
    required: true
    default: .

runs:
  using: composite
  steps:
    - id: install-podman
      run: sudo apt install -y podman
      shell: bash

    - id: prep-fs
      run: |
        touch /tmp/mock-container-args
        mkdir -p ${{ inputs.result-dir }}
      shell: bash

    - id: map-source
      if: inputs.src != null
      run: |
        src="${{ inputs.src }}"
        if [[ "$src" != /* ]]; then src="${{ github.workspace }}/$src"; fi 
        if [[ -d ${src} ]]; then
          arg="-v $src:/in:ro"
        elif [[ -f ${src} ]]; then
          fname=$(basename "${src}")
          arg="-v $src:/in/$fname:ro"
        else
          echo "$src does not exist"
          exit 1
        fi
        echo -n "$arg" > /tmp/mock-container-args
      shell: bash

    - id: restore-cache
      if: inputs.cache == 'true'
      uses: actions/cache/restore@v3
      with:
        path: /tmp/mock
        key: ${{ inputs.chroot }}-${{ hashFiles(inputs.spec) }}

    - id: load-cached-image
      if: inputs.cache == 'true' && steps.restore-cache.outputs.cache-hit == 'true'
      run: podman load --input /tmp/mock/image.tar.gz
      shell: bash

    - id: create-container
      if: inputs.cache != 'true' || steps.restore-cache.outputs.cache-hit != 'true'
      run: podman run -dt --privileged $(cat /tmp/mock-container-args) -v ${{ inputs.result-dir }}:/out fedora:latest > action.cid
      shell: bash

    - id: init-mock-env
      if: inputs.cache != 'true' || steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        cid=$(cat action.cid)
        podman exec $cid dnf install -y mock
        podman exec $cid mock -r ${{ inputs.chroot }} --init
      shell: bash

    - id: write-cached-image
      if: inputs.cache == 'true' && steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        cid=$(cat action.cid)
        podman commit $cid fedora:latest
        mkdir -p /tmp/mock
        podman save fedora:latest | gzip > /tmp/mock/image.tar.gz
      shell: bash

    - id: save-cache
      if: inputs.cache == 'true' && steps.restore-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: /tmp/mock
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}

    - id: copy-in-sources
      if: inputs.src != null
      run: |
        cid=$(cat action.cid)
        for f in $(podman exec $cid ls /in); do
          podman exec $cid mock -r ${{ inputs.chroot }} --copyin /in/$f /builddir/build/SOURCES
        done
      shell: bash

    - id: copy-in-specs
      run: |
        cid=$(cat action.cid)
        spec=$(basename ${{ inputs.spec }})
        podman cp ${{ inputs.spec }} $cid:/tmp/$spec
        podman exec $cid mock -r ${{ inputs.chroot }} --copyin /tmp/$spec /builddir/build/SPECS
      shell: bash

    - id: build
      run: |
        cid=$(cat action.cid)
        spec=$(basename ${{ inputs.spec }})
        podman exec $cid mock -r ${{ inputs.chroot }} --shell rpmbuild -bs /builddir/build/SPECS/$spec
      shell: bash

    - id: copy-out
      run: |
        cid=$(cat action.cid)
        podman exec $cid mock -r ${{ inputs.chroot }} --copyout /builddir/build/SRPMS/* /out
      shell: bash
